version: "3"

vars:
  GORELEASER_VERSION: "2.0.1-pro"
  TOOLS_MOD_DIR: '{{joinPath .ROOT_DIR "tools" | fromSlash}}'
  TOOLS_BIN_DIR: '{{joinPath .ROOT_DIR ".tools" | fromSlash}}'
  
tasks:
  build:
    desc: go build
    cmds:
      - go build -o dist/ ./...

  build-tool:
    internal: true
    label: 'install_{{.name}}'
    cmds: 
      - 'cd {{.TOOLS_MOD_DIR}} && go build -o {{joinPath .TOOLS_BIN_DIR .name}} -trimpath {{.path}}'
    requires:
      vars: [name, path]

  ci:
    desc: ci build pipeline
    cmds:
      - task: mod-tidy
      - task: setup
      - task: generate
      - task: test
      - task: cover
      - task: build
      - task: diff

  clean:
    desc: remove files created during build pipeline
    run: once
    cmds:
      - for: [dist, bin, completions, manpages, release_notes, .tools]
        cmd: rm -rf {{.ITEM}}
      - go clean -i -cache -testcache -modcache -fuzzcache -x

  cover:
    desc: go test coverage
    deps: [test]
    cmds:
      - go tool cover -html=bin/coverage.out -o bin/coverage.html
      - go tool cover -func=bin/coverage.out
    sources:
      - bin/coverage.out
    generates:
      - bin/coverage.html

  dev:
    desc: dev build pipeline
    cmds:
      - task: generate
      - task: lint
      - task: test
      - task: snapshot

  diff:
    desc: git diff
    cmds:
      - git diff --exit-code
      - RES="$(git status --porcelain)" ; if [ -n "$RES" ]; then echo $RES && exit 1 ; fi

  generate:
    desc: generate artifacts
    aliases: [gen]
    run: once
    cmds:
      - 'PATH={{.TOOLS_BIN_DIR}}:$PATH && go generate ./...'

  install-goreleaser:
    cmds:
      - 'curl -sSfLO https://github.com/goreleaser/goreleaser-pro/releases/download/v{{.GORELEASER_VERSION}}/goreleaser-pro_{{.GORELEASER_VERSION}}_amd64.deb'
      - sudo dpkg -i goreleaser-pro*.deb
      - rm goreleaser-pro*.deb
    status:
      - test -z $GITHUB_TOKEN
      - 'goreleaser --version | grep -q {{.GORELEASER_VERSION}}'

  lint:
    desc: golangci-lint
    deps: [generate]
    cmds:
      - cmd: mkdir -p bin
        silent: true
      - '{{.TOOLS_BIN_DIR}}/golangci-lint run --fix --out-format=html:bin/golangci-lint.html,colored-line-number:stdout'
    sources:
      - "**/*.go"
      - ".golangci.yml"
    generates:
      - bin/golangci-lint.html

  mod-tidy:
    desc: go mod tidy
    aliases: [mod]
    run: once
    cmds:
      - go mod tidy
      - cd {{.TOOLS_MOD_DIR | fromSlash}} && go mod tidy
    sources:
      - "**/*.go"
      - "**/go.mod"
      - "**/go.sum"
    generates:
      - "**/go.mod"
      - "**/go.sum"

  setup:
    desc: install tools
    aliases: ['t']
    deps: [mod-tidy]
    vars:
      EXPR_PKG: 's/^\s+_\s+\"(.*)\"\s+\/\/\s+(.*)\s?/\2:\1/p'
      TOOLS_PKGS:
        sh: 'sed -nr "{{.EXPR_PKG}}" {{joinPath .TOOLS_MOD_DIR "tools.go" | fromSlash}}'
    cmds:
      - cmd: rm -rf {{.TOOLS_BIN_DIR}}
      - cmd: mkdir -p {{.TOOLS_BIN_DIR}}
      - for: { var: TOOLS_PKGS }
        task: build-tool
        vars: { name: '{{regexReplaceAll ":.*$" .ITEM ""}}', path: '{{regexReplaceAll ".*:" .ITEM ""}}' }
    sources:
      - "{{.TOOLS_MOD_DIR}}/*"
    generates:
      - "{{.TOOLS_BIN_DIR}}/*"

  snapshot:
    desc: goreleaser build snapshot
    deps: [mod-tidy]
    aliases: [ss]
    cmds:
      - task: setup
      - task: generate
      - goreleaser build --clean --single-target --snapshot
    preconditions:
      - sh: goreleaser check -q
        msg: "failed to validate .goreleaser.yml"

  test:
    desc: go test
    deps: [generate]
    run: once
    cmds:
      - cmd: mkdir -p bin
        silent: true
      - '{{.TOOLS_BIN_DIR}}/gotestsum -- -race -covermode=atomic -coverprofile=bin/coverage.out $(go list ./... | grep -v /mocks)'
    sources:
      - "**/*.go"
      - "**/testdata/**"
    generates:
      - bin/coverage.out